package com.hello;

import java.lang.String;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 * <p>
 * <p>Generated with web3j version 2.0.1.
 */
public final class HelloWorld extends Contract {
    private static final String BINARY = "6060604052341561000c57fe5b5b60408051808201909152600b8082527f41686d6164204a617769640000000000000000000000000000000000000000006020909201918252610051916000916100b3565b50604080518082018252600a81527f4a61776964204a616d69000000000000000000000000000000000000000000006020808301918252600160a060020a033316600090815260019091529290922090516100ac92906100b3565b505b610153565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f457805160ff1916838001178555610121565b82800160010185558215610121579182015b82811115610121578251825591602001919060010190610106565b5b5061012e929150610132565b5090565b61015091905b8082111561012e5760008155600101610138565b5090565b90565b610b11806101626000396000f300606060405236156100805763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663169f98928114610082578063368b87721461015857806340d17c7a1461022e5780634b68d43114610341578063567ebef91461022e5780636f77926b14610541578063e21f37ce146105ea575bfe5b341561008a57fe5b6100d8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061067a95505050505050565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016057fe5b6100d8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061077695505050505050565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023657fe5b6100d8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061079895505050505050565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034957fe5b60408051602060046024803582810135601f81018590048502860185019096528585526100d895833573ffffffffffffffffffffffffffffffffffffffff16959394604494939290920191819084018382808284375094965061081c95505050505050565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023657fe5b6100d8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061079895505050505050565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561054957fe5b6100d873ffffffffffffffffffffffffffffffffffffffff600435166108e6565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105f257fe5b6100d86109a5565b60408051602080825283518183015283519192839290830191850190808383821561011e575b80518252602083111561011e57601f1990920191602091820191016100fe565b505050905090810190601f16801561014a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610682610a33565b6002826040518082805190602001908083835b602083106106b45780518252601f199092019160209182019101610695565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b50939450505050505b919050565b61077e610a33565b8151610791906000906020850190610a45565b505b919050565b6107a0610a33565b816002846040518082805190602001908083835b602083106107d35780518252601f1990920191602091820191016107b4565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516108149591949190910192509050610a45565b505b92915050565b610824610a33565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160209081526040909120835161081492850190610a45565b505b92915050565b6107a0610a33565b816002846040518082805190602001908083835b602083106107d35780518252601f1990920191602091820191016107b4565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516108149591949190910192509050610a45565b505b92915050565b6108ee610a33565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602081815260409283902080548451600294821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156107685780601f1061073d57610100808354040283529160200191610768565b820191906000526020600020905b81548152906001019060200180831161074b57829003601f168201915b50939450505050505b919050565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a2b5780601f10610a0057610100808354040283529160200191610a2b565b820191906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b505050505081565b60408051602081019091526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a8657805160ff1916838001178555610ab3565b82800160010185558215610ab3579182015b82811115610ab3578251825591602001919060010190610a98565b5b50610ac0929150610ac4565b5090565b610ae291905b80821115610ac05760008155600101610aca565b5090565b905600a165627a7a723058204343acf3d2a79a75df90c1e3d03accb9cb72549253d4bfee8acc584a10a5ac940029";

    private HelloWorld(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private HelloWorld(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Utf8String> getSocailRecordHash(Utf8String globalId) {
        Function function = new Function("getSocailRecordHash",
                Arrays.<Type>asList(globalId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));

        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setMessage(Utf8String theMessage) {
        Function function = new Function("setMessage", Arrays.<Type>asList(theMessage), Collections.<TypeReference<?>>emptyList());
        // System.out.println(function.toString());
        System.out.println(FunctionEncoder.encode(function));
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> updateSocialRecordHash(Utf8String globalId, Utf8String socialRecordHash) {
        Function function = new Function("updateSocialRecordHash", Arrays.<Type>asList(globalId, socialRecordHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addUser(Address userAddress, Utf8String name) {
        Function function = new Function("addUser", Arrays.<Type>asList(userAddress, name), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addGlobalId(Utf8String globalId, Utf8String socialRecordHash) {
        Function function = new Function("addGlobalId", Arrays.<Type>asList(globalId, socialRecordHash), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getUser(Address _user) {
        Function function = new Function("getUser",
                Arrays.<Type>asList(_user),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> message() {
        Function function = new Function("message",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<HelloWorld> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue) {
        return deployAsync(HelloWorld.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialValue);
    }

    public static Future<HelloWorld> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue) {
        return deployAsync(HelloWorld.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialValue);
    }

    public static HelloWorld load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HelloWorld(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static HelloWorld load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HelloWorld(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
